 
To init your first ethereum node:
————————————————————
geth —datadir “<ethereumdir>/HelloWorld” init “<ethereumdir>/genesis.json” 

To start the above initiated node: 
geth —datadir “<ethereumdir>/HelloWorld” —nodiscover —networkid 1234 —rpc —rpcport “8545” —rpccorsdomain “*” console 2>console.log

geth console starts with a chevron >

admin,nodeInfo()

personal.newAccount()

eth.defaultAccount=eth.accounts[0]

eth.blockNumber

miner.start(1)

personal.unlockAccount(eth.accounts[0])

eth.getBalance(eth.defaultAccount)

To create an additional node:
——————————————————
geth —datadir “<ethereumdir>/additionalnode” init “<ethereumdir>/genesis.json” 

To start the above initiated node: 
geth —datadir “<ethereumdir>/additionalnode” —nodiscover —port 30304 —networkid 1234 —rpc —rpcport “8545” —rpccorsdomain “*” console 2>console.log
(*notice the different port number but same networkid*) (**On Windows, add —ipcdisable, else you will get access denied**Also console 2> c:\tmp\console.log where tmp exists)

admin.nodeInfo()

copy the enode number from the above output

in the first node’s terminal window:
admin.addPeer(“<paste the copied enode number of the additional node>”) 

admin.peers

To operate a smart contract  from the terminal:
———————————————————————————————


var abi = [{<paste-contract’s abi here}]
var addrs = “<paste contract’s address here>”
var mycontract = eth.contract(abi).at(adds)
Now you can call methods like this: my contract.<method>(arguments) 

eth.pendingTransactions()
or eth.getTransaction(transaction addr)









